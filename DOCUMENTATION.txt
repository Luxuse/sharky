# Documentation — Sharky Compressor / Decompressor

## Introduction
**Sharky** est un outil CLI écrit en Rust pour compresser et décompresser des fichiers / répertoires.  
Cette version s’appuie sur un pipeline hybride **Deflate + Zstd** : un bon équilibre entre vitesse et taux de compression, avec gestion mémoire optimisée grâce au streaming.

## Caractéristiques

- **Compression hybride efficace**  
  *Tar* pour l’archivage, suivi d’une double compression : Deflate (niveau 9) puis Zstd (niveau ajustable).

- **Streaming**  
  Traite les données par flux ; même les très gros ensembles sont gérés sans pic de RAM.

- **Équilibre vitesse / ratio**  
  Ajustez le niveau Zstd pour privilégier soit la rapidité, soit la compression.

- **Indicateur de progression**  
  Barre ou pourcentage en temps réel pendant les opérations.

---

## Construction du projet

1. Vérifiez que **Rust** et **Cargo** sont installés.  
2. Placez-vous à la racine du projet, puis compilez en release :

```bash
cargo build --release

Le binaire sera généré dans target/release/sharky.
Utilisation

./target/release/sharky [OPTIONS] --input <INPUT> --output <OUTPUT>

Option	Description
-c, --compress	Mode compression
-d, --decompress	Mode décompression (incompatible avec --compress)
-i, --input <INPUT>	Fichier ou dossier source
-o, --output <OUTPUT>	Chemin de sortie
-l, --zstd-level <N>	Niveau Zstd (0 – 22, défaut : 7)

    Le niveau Deflate est fixe à 9 et n’est pas configurable.

Pipeline de compression
Compression (--compress)

    Tar : l’entrée est archivée en un flux unique.

    Deflate -9 : première passe de compression.

    Zstd -N : seconde passe (niveau N choisi).

    Écriture du résultat dans le fichier de sortie.

Décompression (--decompress)

    Lecture de l’archive.

    Décompression Zstd.

    Décompression Deflate.

    Extraction Tar vers la destination.

Exemples
Action	Commande
Compresser le dossier data (Zstd 7 par défaut)	./target/release/sharky -c -i data -o data.stel
Compresser doc.txt avec Zstd 22	./target/release/sharky -c -i doc.txt -o doc.txt.stel -l 22
Décompresser archive.stel vers restored_data	./target/release/sharky -d -i archive.stel -o restored_data
